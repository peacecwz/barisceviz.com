_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[18],{"58Os":function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tr/posts/dotnet-core-hosted-service-ile-azure-service-bus-kullanimi",function(){return a("hxaw")}])},"7ljp":function(e,n,a){"use strict";a.d(n,"a",(function(){return m})),a.d(n,"b",(function(){return p}));var r=a("q1tI"),i=a.n(r);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function u(e,n){if(null==e)return{};var a,r,i=function(e,n){if(null==e)return{};var a,r,i={},t=Object.keys(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),s=function(e){var n=i.a.useContext(c),a=n;return e&&(a="function"===typeof e?e(n):o(o({},n),e)),a},m=function(e){var n=s(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var a=e.components,r=e.mdxType,t=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=s(a),b=r,p=m["".concat(l,".").concat(b)]||m[b]||d[b]||t;return a?i.a.createElement(p,o(o({ref:n},c),{},{components:a})):i.a.createElement(p,o({ref:n},c))}));function p(e,n){var a=arguments,r=n&&n.mdxType;if("string"===typeof e||r){var t=a.length,l=new Array(t);l[0]=b;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"===typeof e?e:r,l[1]=o;for(var c=2;c<t;c++)l[c]=a[c];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},bQFp:function(e,n,a){"use strict";var r=a("pVnL"),i=a.n(r),t=a("8OQS"),l=a.n(t),o=a("qKvR"),u=a("q1tI"),c=a("BMxC"),s=Object(u.forwardRef)((function(e,n){var a=e.htmlWidth,r=e.htmlHeight,t=e.alt,u=l()(e,["htmlWidth","htmlHeight","alt"]);return Object(o.d)("img",i()({width:a,height:r,ref:n,alt:t},u))})),m=Object(u.forwardRef)((function(e,n){var a,r=e.src,t=e.fallbackSrc,m=e.onError,d=e.onLoad,b=e.ignoreFallback,p=l()(e,["src","fallbackSrc","onError","onLoad","ignoreFallback"]),g=function(e){var n=e.src,a=e.onLoad,r=e.onError,i=Object(u.useRef)(!0),t=Object(u.useState)(!1),l=t[0],o=t[1];return Object(u.useEffect)((function(){if(n){var e=new window.Image;e.src=n,e.onload=function(e){i.current&&(o(!0),a&&a(e))},e.onError=function(e){i.current&&(o(!1),r&&r(e))}}}),[n,a,r]),Object(u.useEffect)((function(){return function(){i.current=!1}}),[]),l}({src:r,onLoad:d,onError:m});return a=b?{src:r,onLoad:d,onError:m}:{src:g?r:t},Object(o.d)(c.a,i()({as:s,ref:n},a,p))}));m.displayName="Image",n.a=m},hxaw:function(e,n,a){"use strict";a.r(n),a.d(n,"default",(function(){return s}));var r=a("wx14"),i=a("Ff2n"),t=a("q1tI"),l=a.n(t),o=a("7ljp"),u=a("q3Ej"),c=(l.a.createElement,{});function s(e){var n=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)(u.a,{title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131",mdxType:"MarkdownWrapper"},Object(o.b)("h1",null,".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/2732/0*Oo-sqLT89ulFCem8.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Bu yaz\u0131m\u0131zda .NET Core i\xe7erisinde gelen HostedServices ile Azure Service Bus \xfcr\xfcn\xfc nas\u0131l konu\u015fur ve Producer & Consumer konular\u0131n\u0131 konu\u015faca\u011f\u0131z."),Object(o.b)("h2",null,"Azure Service Bus"),Object(o.b)("p",null,"Microsoft Azure \xfczerinde PaaS olarak sunulan scalable bir messaging \xfcr\xfcn\xfcd\xfcr. Event Driven Architecture gibi konularda s\u0131k tercih edilen bu messaging \xfcr\xfcnlerinden Cloud Vendor \xfczerinde sunulan bir servistir. Azure \xfczerinde RabbitMQ ve Apache Kafka da sunulmaktad\u0131r fakat bu di\u011fer iki \xfcr\xfcn aras\u0131ndaki en b\xfcy\xfck fark, infrastructure maliyetleri, maintenance gibi operasyonel s\xfcre\xe7lerden kurtulup sadece scale etti\u011finiz ve infrastructure \u0131 d\xfc\u015f\xfcnmeden \xe7al\u0131\u015fabilmenizi sa\u011flamaktad\u0131r."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/1380/1*8_gDdy9l3xk32FUA_LaRXQ.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"En temel fiyatland\u0131rma yukar\u0131daki g\xf6rd\xfc\u011f\xfcn\xfcz tablo ile a\xe7\u0131klanabilir. Bu fiyatlar West Europe fiyatlar\u0131d\u0131r. Bu fiyatland\u0131rmalar\u0131 daha detayland\u0131rmak ve incelemk isterseniz Azure Calculator \xfczerinden fiyatland\u0131rmalar\u0131n\u0131z\u0131 hesaplayabilirsiniz"),Object(o.b)("h3",null,"Azure Service Bus Olu\u015fturma"),Object(o.b)("p",null,"Azure Service Bus olu\u015fturman\u0131z i\xe7in en temel ihtiya\xe7lardan bir tanesi Azure \xfczerinde ge\xe7erli bir aboneli\u011finizin olmas\u0131 gerekmektedir."),Object(o.b)("p",null,"Azure Portal \xfczerinden Create a Resource > Integration > Service Bus se\xe7erek olu\u015fturma ekran\u0131na girelim."),Object(o.b)("p",null,"Buradaki en \xe7ok dikkat etmemiz gereken nokta Pricing taraf\u0131d\u0131r. Azure, \xf6neri olarak Premium sunmaktad\u0131r fakat buradaki ihtiyac\u0131n\u0131z\u0131 belirleyerek ilgili tier \u0131 se\xe7meniz daha do\u011fru olacakt\u0131r."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/858/1*1EnXyjvvyROqPOstr0EMgQ.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Buradaki Standard ve Premium tier lar\u0131 aras\u0131nda en \xf6nemli farklardan birisi resource un dedicated veya shared ortamlarda sunulmas\u0131d\u0131r. Dedicated ortam daha performansl\u0131 ama maliyeti y\xfcksek olacakt\u0131r. Y\xfcksek seviyede y\xfck sahibi iseniz Premium mant\u0131kl\u0131d\u0131r. Standard ile Basic aras\u0131nda ise en b\xfcy\xfck farkl\u0131l\u0131klardan birisi topic kavram\u0131 Standard ve sonraki tierlar \xfczerinde gelmektedir. Bu y\xfczden orta \xf6l\xe7ekli uygulamalar i\xe7in Standard paketini se\xe7mekteyim."),Object(o.b)("p",null,"Standard to Premium migration i\xe7in safe bir ge\xe7i\u015f sa\u011flamaktad\u0131r. Post-Migration ile t\xfcm trafi\u011finizi Premium Service Bus \xfczerine ald\u0131\u011f\u0131n\u0131zda art\u0131k Standard paketi kullanmadan devam edebilirsiniz. Asl\u0131nda migration s\xfcrecinde iki farkl\u0131 resource olu\u015fturup aralar\u0131nda post-migration sa\u011flamaktad\u0131r."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/1400/1*_RnbpmIvtwozjE9rtBGBqw.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Yukar\u0131daki ekran g\xf6r\xfcnt\xfcs\xfcndeki gibi resource ve location se\xe7imlerimi yap\u0131yorum ve olu\u015fturuyorum."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/522/1*VHt6fHwW2AYOPpgVi7O6ug.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Service Bus resource unu olu\u015fturdu\u011fumuza g\xf6re art\u0131k Queue ve Topics aras\u0131ndaki fark\u0131 konu\u015fabiliriz. Bu yaz\u0131mda \xe7ok darlamak istemiyorum fakat en temel fark\u0131n\u0131 \xe7ok basit\xe7e ve \xf6rnekle aktaraca\u011f\u0131m"),Object(o.b)("p",null,"Queue \xfczerinde bir mesaj\u0131 bir consumer (t\xfcketen) kullanabilirken, topics \xfczerinden ge\xe7en bir mesaj\u0131 birden fazla consumer kullanabilmektedir."),Object(o.b)("p",null,"\xd6rne\u011fin; \xfcr\xfcn olu\u015fturdu\u011funa dair bir mesaj g\xf6nderiyorsunuz ve bu mesaj at\u0131ld\u0131ktan sonra SMS, Email, Teslimat paketi olu\u015fturma i\u015flemlerini yap\u0131yorsunuz ve bunu paralel olarak yapmak istiyorsunuz diyelim. Bu noktada Topics kullanman\u0131z gerekmektedir. Siz mesaj\u0131 verdi\u011finiz zaman bu mesaj, SMS i\xe7in ayr\u0131, Email i\xe7in ayr\u0131 ve Teslimat paketi i\xe7in ayr\u0131 kullan\u0131lacak ve paralel olarak \xe7al\u0131\u015fabilecektir."),Object(o.b)("h2",null,".NET Core & ServiceBus ile Consumer Projesi olu\u015fturma"),Object(o.b)("p",null,"Bo\u015f console application olu\u015ftural\u0131m ve i\xe7erisine birka\xe7 package kurarak haz\u0131rlayal\u0131m."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"    dotnet new console -n ServiceBusExample\n")),Object(o.b)("p",null,"Ard\u0131ndan proje i\xe7erisine girelim ve a\u015fa\u011f\u0131daki iki \xf6nemli paketi kural\u0131m"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"    dotnet add package Microsoft.Extensions.Hosting\n")),Object(o.b)("p",null,"Bu paket HostedServices ve Dependency Injection\u2019\u0131 configure edebilmenizi sa\u011flamas\u0131 a\xe7\u0131s\u0131ndan haz\u0131rlanm\u0131\u015f bir pakettir."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"    dotnet add package Microsoft.Azure.ServiceBus\n")),Object(o.b)("p",null,"Bu paket ise Azure ServiceBus integration sa\u011flaman\u0131z i\xe7in gereken Client library package \u0131d\u0131r."),Object(o.b)("p",null,"Geli\u015ftirece\u011fimiz Consumer projesinde configuration lar\u0131m\u0131z\u0131 CommandLine Arguments veya Environment Variables olarak alaca\u011f\u0131m. \u0130sterseniz JsonFileConfiguration ekleyebilirsiniz. Configuration i\xe7in Program.cs i\xe7erisinde basit bir configure method u yazal\u0131m"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"    private static void ConfigureHostConfiguration(IConfigurationBuilder builder)\n    {\n        builder\n            .AddEnvironmentVariables()\n            .AddCommandLine(Arguments);\n    }\n")),Object(o.b)("p",null,"Burada Arguments olarak belirtti\u011fimiz asl\u0131nda Main methodunda gelen args parametresidir. Bu parametreyi class i\xe7erisine ta\u015f\u0131yal\u0131m"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),'    private static string[] Arguments { get; set; }\n\n    static void Main (string[] args) {\n        Arguments = args;\n\n        Console.WriteLine ("Hello World!");\n    }\n')),Object(o.b)("p",null,"B\xf6ylelikle Configuration methodu art\u0131k Arguments a eri\u015febilir. Host umuzu basit\xe7e aya\u011fa kald\u0131ralman\u0131n vakti geldi. DefaultHostBuilder ile basit bir host build edece\u011fiz ve onu \xe7al\u0131\u015ft\u0131raca\u011f\u0131z. Host kapanana kadar uygulamam\u0131z \xe7al\u0131\u015facakt\u0131r. B\xf6ylelikle Kubernetes \xfczerinde rahatl\u0131kla \xe7al\u0131\u015ft\u0131rabilir ve consumer projelerinizi ayakland\u0131rabilirsiniz."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"    static async Task Main(string[] args)\n    {\n        Arguments = args;\n\n        var host = Host.CreateDefaultBuilder(args)\n        .ConfigureHostConfiguration(ConfigureHostConfiguration)\n        .Build();\n\n        await host.RunAsync();\n    }\n")),Object(o.b)("p",null,"Host async olarak run edilebilidi\u011fi i\xe7in burada Main methodumuzu async olarak \xe7al\u0131\u015ft\u0131rmaya ba\u015flad\u0131k. Yazd\u0131\u011f\u0131mz\u0131 Configure methodunu Host Configuration \u0131 olarak verdik ve art\u0131k Command-line ve Environment Variables olarak configleri alabiliriz."),Object(o.b)("p",null,"Art\u0131k HostedService olu\u015fturmam\u0131z\u0131n vakti geldi \ud83c\udf89\ud83c\udf89 Bir host i\xe7erisine birden fazla HostedService yerle\u015ftirebilirsiniz ve bu HostedServices lar \xfczerinde Dependency Injection uygulayabilirsiniz. ConsumerHostedService ad\u0131nda bir class olu\u015ftural\u0131m ve bunu HostedService olarak initialize etmeye ba\u015flayal\u0131m."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),'    public class ConsumerhostedService : IHostedService, IDisposable\n    {\n        public Task StartAsync(CancellationToken cancellationToken)\n        {\n            Console.WriteLine("Started Hosted Service");\n\n            return Task.CompletedTask;\n        }\n\n        public Task StopAsync(CancellationToken cancellationToken)\n        {\n            Console.WriteLine("Stopping Hosted Service");\n\n            return Task.CompletedTask;\n        }\n\n        public void Dispose()\n        {\n            Console.WriteLine("Dispossing...");\n        }\n    }\n')),Object(o.b)("p",null,"Disposable bir hosted service yaratt\u0131\u011f\u0131m\u0131z zaman en temelde implement etmemiz gereken methodlar bu \u015fekildedir. Start ve Stop b\xf6l\xfcm\xfcnde connection kurdu\u011fumuz external service leri open ve close edebiliriz. Dispose methodunda ise art\u0131k bu objeleri GC\u2019ye teslim edebiliriz."),Object(o.b)("p",null,"StartAsync ve StopAsync ile gelen CancellationToken lar \xf6nemlidir. Buradaki cancellationToken lar\u0131 a\xe7aca\u011f\u0131n\u0131z connection veya thread lere vermenizi tavsiye ederim. HostedService durduruldu\u011funda b\xf6ylelikle o anda ger\xe7ekle\u015fen process i de CancellationToken sayesinde durdurabilirsiniz. B\xf6ylelikle uygulaman\u0131z\u0131 sa\u011fl\u0131kl\u0131 bir \u015fekilde devam ettirmi\u015f olur veya HostedService kapat\u0131ld\u0131\u011f\u0131n\u0131 anlad\u0131\u011f\u0131nz\u0131da yapman\u0131z gereken son i\u015flemleri ger\xe7ekle\u015ftirip, uygulaman\u0131z\u0131n kapanmas\u0131n\u0131 sa\u011flayabilirsiniz."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"\n    private static void ConfigureServices(HostBuilderContext hostBuilderContext,\n        IServiceCollection serviceCollection)\n    {\n        serviceCollection.AddHostedService<ConsumerhostedService>();\n    }\n")),Object(o.b)("p",null,"Olu\u015fturdu\u011fumuz HostedService i Program.cs i\xe7erisinde ConfigureService methodu olu\u015fturarak Dependency Injection a eklemek ad\u0131na haz\u0131rlayal\u0131m. Ard\u0131ndan bu methodumuzu HostBuilder i\xe7erisine verelim ve Host\u2019u bu service ler ile birlikte olu\u015fturmaya ba\u015flas\u0131n."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"    static async Task Main(string[] args)\n    {\n        Arguments = args;\n\n        var host = Host.CreateDefaultBuilder(args)\n        .ConfigureHostConfiguration(ConfigureHostConfiguration)\n        .ConfigureServices(ConfigureServices) // Add ConfigureServices method to Host\n        .Build();\n\n        await host.RunAsync();\n    }\n")),Object(o.b)("p",null,"Uygulamam\u0131z\u0131 \xe7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda g\xf6rd\xfc\u011f\xfcm\xfcz gibi HostedService imiz \xe7al\u0131\u015fmaktad\u0131r."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/994/1*ZYw-UScbDYQkxRLfnCTXyw.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Durdurmak istedi\u011fimizde ise g\xf6rd\xfc\u011f\xfcn\xfcz gibi kill etme s\xfcreci de bu \u015fekilde i\u015flemektedir."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/976/1*sfTLISBoW-8CNxsWrrWb9Q.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Bunlar\u0131 tamamlad\u0131\u011f\u0131m\u0131za g\xf6re art\u0131k ServiceBus Integration i\u015flemlerimize ge\xe7ebiliriz. Bu a\u015famalarda ServiceBus \xfczerinde Queue olu\u015fturdu\u011fumuzu varsayarak geli\u015ftirece\u011fiz. Son a\u015famada ServiceBus \xfczerinde Queue olu\u015fturup ald\u0131\u011f\u0131m\u0131z ConnectionString i uygulamam\u0131za verip \xe7al\u0131\u015ft\u0131\u011f\u0131n\u0131 g\xf6rece\u011fiz"),Object(o.b)("h3",null,"Service Bus Integration"),Object(o.b)("p",null,"ConfigureServices methodumuzda ServiceBus i\xe7in QueueClient initialize edelim ve IoC i\xe7erisine register edelim. Ard\u0131ndan da HostedService i\xe7erisine inject ederek consumer \u0131m\u0131z\u0131n son a\u015famas\u0131n\u0131 haz\u0131rlayal\u0131m."),Object(o.b)("p",null,"Bu method i\xe7erisinde configuration \xfczerinden gelen ServiceBusConnectionString ve ServiceBusQueueName ad\u0131nda iki tane config alaca\u011f\u0131z ve bunlarla QueueClient \u0131 initialize edece\u011fiz"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),'    private static void ConfigureServices(HostBuilderContext hostBuilderContext,\n        IServiceCollection serviceCollection)\n    {\n        var configuration = hostBuilderContext.Configuration;\n\n        string connectionString = configuration.GetValue<string>("ServiceBusConnectionString");\n        string queueName = configuration.GetValue<string>("ServiceBusQueueName");\n\n        if (string.IsNullOrEmpty(connectionString))\n        {\n            throw new ArgumentException("Service Bus Connection String cannot be null.");\n        }\n\n        if (string.IsNullOrEmpty(queueName))\n        {\n            throw new ArgumentException("Service Bus Queue Name cannot be null.");\n        }\n\n        var queueClient = new QueueClient(connectionString, queueName);\n\n        serviceCollection.AddLogging();\n\n        serviceCollection.AddSingleton<IQueueClient>(queueClient);\n        serviceCollection.AddHostedService<ConsumerhostedService>();\n    }\n')),Object(o.b)("p",null,"Burada configler bo\u015f gelirse uygulamam\u0131z\u0131 direkt patlat\u0131yoruz ve devam etmesini engelliyoruz. Bu configler bizim i\xe7in required seviyesindedir. Configler d\xfczg\xfcn geldi\u011finde art\u0131k QueueClient \u0131 initialize edip, IQueueClient ile IoC mize register edebiliriz. Ayn\u0131 zamanda Logging i\xe7inde AddLogging diyerek IoC i\xe7erisine register edelim. Console i\xe7erisine loglama yapabilmemiz i\xe7in ihtiyac\u0131m\u0131z olacakt\u0131r."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"    private readonly IQueueClient _queueClient;\n    private readonly ILogger<ConsumerhostedService> _logger;\n\n    public ConsumerhostedService(IQueueClient queueClient,\n        ILogger<ConsumerhostedService> logger)\n    {\n        _queueClient = queueClient;\n        _logger = logger;\n    }\n")),Object(o.b)("p",null,"ConsumerHostedService i\xe7erisinde QueueClient ve Logger \u0131 inject edelim. Ard\u0131ndan Queue binding operasyonlar\u0131m\u0131z\u0131 yapal\u0131m"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),'        public Task StartAsync(CancellationToken cancellationToken)\n        {\n            var messageHandlerOptions = new MessageHandlerOptions(e =>\n        {\n            OnError(e.Exception);\n            return Task.CompletedTask;\n        })\n        {\n            MaxConcurrentCalls = 3,\n            AutoComplete = false\n        };\n\n            _queueClient.RegisterMessageHandler(OnProcess, messageHandlerOptions);\n            _logger.LogInformation("Registered to ServiceBus");\n\n            return Task.CompletedTask;\n        }\n\n        private Task OnProcess(Message message, CancellationToken cancellationToken)\n        {\n            return Task.CompletedTask;\n        }\n\n        private void OnError(Exception exception)\n        {\n            _logger.LogError($"Get exception on processing queue {exception.Message}", exception);\n        }\n')),Object(o.b)("p",null,"StartAsync i\xe7erisinde Queue \xfczerinde gelecek Message lar\u0131 handle edebilmemiz i\xe7in OnProcess ad\u0131nda bir methodumuzu register ediyoruz. Queue i\xe7erisine eklenen her mesajda OnProcess methodu tetiklenecektir. MessageHnadlerOptions \xfczerinde Concurrent i\u015flenebilecek mesaj say\u0131s\u0131n\u0131, i\u015flenen mesajlar\u0131n otomatik silinmesi gibi ayarlar\u0131 yapabiliyorsunuz. Ben AutoComplete \xf6zelli\u011fini kapat\u0131yorum. Bunun sebebi, olas\u0131 ald\u0131\u011f\u0131m hatalarda tekrarlayabilmek ad\u0131nad\u0131r. E\u011fer b\xf6yle bir ihtiyac\u0131n\u0131z yok ise AutoComplete i true olarak ayarlayabilir ve mesajlar\u0131n\u0131z exception almad\u0131\u011f\u0131 s\xfcrece Queue \xfczerinden d\xfc\u015fmeyecektir."),Object(o.b)("p",null,"Hata alma durumunda ald\u0131\u011f\u0131 exception \u0131 OnError ad\u0131nda bir method a g\xf6nderelim. Ard\u0131ndan bu method basit bir loglama i\u015flemi ger\xe7ekle\u015ftirsin. Burada custom logicler yazabilirsiniz. \xd6rne\u011fin bir mesaj\u0131 3 kez i\u015flemeyi denesin, e\u011fer 3 den fazla hata al\u0131rsa bu mesaj\u0131 queue dan silsin gibi retry mekanizmalar\u0131 yaratabilirsiniz"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"        public async Task StopAsync(CancellationToken cancellationToken)\n        {\n            await _queueClient.CloseAsync();\n        }\n")),Object(o.b)("p",null,"StopAsync i\xe7erisinde QueueClient \u0131 stop ederek art\u0131k consume etmesini kapatabiliriz."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),'        private Task OnProcess(Message message, CancellationToken cancellationToken)\n        {\n            var json = Encoding.UTF8.GetString(message.Body);\n            _logger.LogInformation($"Queue Message: {json}");\n\n            var data = JsonSerializer.Deserialize<object>(json);\n\n            // Your custom logics here ...\n\n            return Task.CompletedTask;\n        }\n')),Object(o.b)("p",null,"OnProcess i\xe7erisinde gelen message byte array olarak gelmektedir. Bu gelen byte array i JSON string e \xe7evirip ard\u0131ndan Deserialize edebilirsiniz. Buradaki kritik nokta ise e\u011fer y\xfcksek boyutlarda mesajlar geliyorsa OutOfMemory ya\u015famamak i\xe7in MemoryStream ile Stream Deserializer yapabilirsiniz. B\xf6ylelikle b\xfcy\xfck JSON verilerini OutOfMemory hatas\u0131 almadan deserialize edebilirsiniz. Async bir method \xe7a\u011f\u0131rd\u0131\u011f\u0131n\u0131z takdirde retun Task.CompletedTask d\xf6nmenize de gerek kalmayacakt\u0131r."),Object(o.b)("h3",null,"Service Bus Queue Olu\u015fturma"),Object(o.b)("p",null,"Azure Portal \xfczerinden Queue olu\u015ftural\u0131m ve ConnectionString alal\u0131m. B\xf6ylelikle uygulamam\u0131z\u0131 \xe7al\u0131\u015fmas\u0131 i\xe7in gereken son a\u015famay\u0131 tamamlam\u0131\u015f olaca\u011f\u0131z."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/1400/1*6cRLuqBpYG4TtrpGBK2yfg.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Burada ServiceBus \xfczerinde built-in gelen birtak\u0131m \xf6zellikler bulunmaktad\u0131r. Benim sevdi\u011fim en g\xfczel \xf6zelliklerden birisi duplication detection \xf6zelli\u011fidir. Bu \xf6zelli\u011fi enable etti\u011finizde belirli bir aral\u0131ktaki tekrarlanan mesajlar\u0131 engelleyebilirsiniz. B\xf6ylelikle sisteminizin daha stabil olmas\u0131n\u0131 sa\u011flars\u0131n\u0131z. Bir di\u011fer \xf6zelli\u011fi ise session \xf6zelli\u011fidir. Burada ise queue i\xe7erisindeki mesajlar\u0131n at\u0131ld\u0131\u011f\u0131 s\u0131rada consume edilmesinin garantisini vermektedir. First In First Out (FIFO) olarak \xe7al\u0131\u015fan ve sizin att\u0131\u011f\u0131n\u0131z s\u0131rada \xe7al\u0131\u015fmas\u0131n\u0131 garanti etmektedir. B\xf6ylelikle session olu\u015fturarak farkl\u0131 bir transactional yap\u0131 kullanabilirsiniz. Bu \xf6zellik distributed sistemler i\xe7in tehlikelidir. Bu y\xfczden mimarinizi bunun \xfczerine kurmaman\u0131z\u0131 tavsiye edebilirim. Expire olan message lar\u0131 otomatik olarak dead letter a atabilir ve message kaybetmenizi minimum a d\xfc\u015f\xfcrebilirsiniz. Buradaki dikkat edebilece\u011finiz bir di\u011fer \xf6zellik ise Lock Duration olacakt\u0131r. Ack g\xf6ndermedi\u011finiz mesajlar i\xe7in belirledi\u011finiz bir lock time yarat\u0131yor ve bu s\xfcre i\xe7erisinde ba\u015fka consumer bu mesaj\u0131 consume edemiyor. Bu s\xfcreyi a\u015ft\u0131\u011f\u0131nda ve Ack almad\u0131ysa ba\u015fka consumerlar taraf\u0131ndan consume edilebilmektedir."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/1204/1*9fUYexBp1FE6_dWQBPJcTg.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Olu\u015fturdu\u011fumuz Queue \xfczerinden Shared access policies b\xf6l\xfcm\xfcnden Policy yaratal\u0131m. Burada olu\u015fturaca\u011f\u0131m\u0131z Policy, tam olarak ne yapaca\u011f\u0131n\u0131 belirtmekteyiz. Consumer i\xe7in Listen Policy, Producer i\xe7in ise Send Policy tan\u0131mlayarak iki farkl\u0131 ConnectionString yaratabilir, b\xf6ylelikle Security a\xe7\u0131s\u0131ndan ortamlar\u0131n\u0131z\u0131n g\xfcvenli\u011fini sa\u011flayabilirsiniz. Bu \xf6rne\u011fimizde hem Consumer hem de producer olarak yapaca\u011f\u0131m\u0131z i\xe7in Manage i tercih ediyoruz."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/1196/1*qFkPBXqnmgqAEgs5a7fKGQ.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"ConnectionString i\xe7erisindeki EntityPath i silebilirsiniz. Uygulamam\u0131z i\xe7erisinde zaten QueueName olarak verece\u011fimiz i\xe7in ConnectionString e eklememize gerek yok."),Object(o.b)("h3",null,"Consumer Uygulamas\u0131n\u0131 Test Edelim"),Object(o.b)("p",null,"Gerekli olan t\xfcm a\u015famalar\u0131 tamamlad\u0131\u011f\u0131m\u0131za g\xf6re art\u0131k \xe7al\u0131\u015ft\u0131rabiliriz. Uygulamam\u0131za Environment Variable ya da Command-line \xfczerinden ConnectionString ve QueueName i iletebiliriz. Ben Command-line \xfczerinden tercih edece\u011fim"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),'    dotnet run /"ServiceBusConnectionString={ServiceBusConnectionString}" /"ServiceBusQueueName={ServiceBusQueueName}"\n')),Object(o.b)("p",null,"Yukar\u0131daki komut i\xe7erisinde {ServiceBusConnectionString} ve {ServiceBusQueueName} kendi olu\u015fturdu\u011funuz ConnectionString ve QueueName ile de\u011fi\u015ftiriniz."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/1400/1*6jDoAluS_GN_nSp0yWpyyA.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"Ard\u0131ndan test i\xe7in Azure Portal \xfczerinden olu\u015fturdu\u011funuz Queue i\xe7erisinde Service Bus Explorer ile mesaj g\xf6nderebilirsiniz."),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://miro.medium.com/max/1400/1*xB5H6KL7WHO7g2-MebL0_A.png",alt:"alt text",title:".NET Core Hosted Service ile Azure Service Bus Kullan\u0131m\u0131"}))),Object(o.b)("p",null,"G\xf6rd\xfc\u011f\xfcn\xfcz gibi g\xf6nderdi\u011fimiz message uygulamam\u0131za iletildi ve log olarak yazd\u0131. Consumer b\xf6l\xfcm\xfcm\xfcz ba\u015far\u0131l\u0131 bir \u015fekilde \xe7al\u0131\u015ft\u0131."),Object(o.b)("h2",null,"Producer Uygulamas\u0131 Geli\u015ftirme"),Object(o.b)("p",null,"Consumer ile Producer aras\u0131ndaki en b\xfcy\xfck farklardan birisi, RegisterMessageHandler \u0131 \xe7a\u011f\u0131rman\u0131za gerek yoktur. Yapman\u0131z gereken IQueueClient \u0131 mesaj\u0131 g\xf6ndermek istedi\u011finiz class i\xe7erisine inject ettikten sonra a\u015fa\u011f\u0131daki gibi \xf6rnek bir kod \xe7al\u0131\u015ft\u0131rman\u0131z yeterli olacakt\u0131r. \xd6rnek olarak consume etti\u011fim mesaj\u0131 tekrar ayn\u0131 queue ya b\u0131rakal\u0131m."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),'        private async Task OnProcess(Message message, CancellationToken cancellationToken)\n        {\n            var json = Encoding.UTF8.GetString(message.Body);\n            _logger.LogInformation($"Queue Message: {json}");\n\n            var data = JsonSerializer.Deserialize<object>(json);\n\n            if (data != null)\n            {\n                var producerData = new\n                {\n                    message = "Hello Service Bus from Producer"\n                };\n\n                string producerJson = JsonSerializer.Serialize(producerData);\n\n                await _queueClient.SendAsync(new Message(Encoding.UTF8.GetBytes(producerJson)));\n            }\n        }\n')),Object(o.b)("p",null,"Gelen mesaj bo\u015f de\u011filse producerData ad\u0131nda bir obje olu\u015fturuluyor ve bu JSON string olarak serialize ediliyor ve ard\u0131ndan byte array e \xe7evirilerek Message class \u0131na verilerek g\xf6nderiliyor. Bu message class \u0131 i\xe7erisinde custom properties ler de g\xf6nderebilirsiniz. \xd6rne\u011fin ka\xe7 kez retry etti\u011fi, veya birtak\u0131m metadata lar olabilir (CorrelationId, Sender Agent Name vs.) SendAsync ile birden fazla mesaj\u0131 ayn\u0131 zamanda da g\xf6nderebilirsiniz. List olarak da kabul etmektedir. Burada da OutOfMemory ya\u015famamak ad\u0131na Serialize i\u015flemini de Stream olarak uygulayabilirsiniz"),Object(o.b)("h2",null,"Sonland\u0131ral\u0131m"),Object(o.b)("p",null,"Bu yaz\u0131m\u0131zda temel olarak Azure Service Bus kullan\u0131m\u0131n\u0131 ve bunu .NET Core uygulamalar\u0131nda en ideal y\xf6ntem olan HostedService ile nas\u0131l Consumer veya Producer olarak sa\u011flad\u0131\u011f\u0131m\u0131z\u0131, Dependency Injection uygulayarak temiz bir yap\u0131da kurduk. Unit Test yazaca\u011f\u0131n\u0131z ve QueueClient \u0131 kolayca Mocklayabileceksiniz. B\xf6ylelikle 3rd party integration lar\u0131n\u0131z\u0131 da kolayca Mock layarak business logic testlerinizi yazabilirsiniz."),Object(o.b)("p",null,"Twitter ve Github \xfczerinden takip etmeyi unutmuyoruzdur umar\u0131m \ud83d\ude07\ud83d\ude07\ud83d\ude07"),Object(o.b)("p",null,"Art\u0131k Youtube \xfczerinden de yay\u0131nda olaca\u011f\u0131m. Kanal\u0131ma abone olman\u0131z\u0131 ve bildirimleri a\xe7arak en g\xfcncel teknolojileri nas\u0131l uygulad\u0131\u011f\u0131m\u0131 takip edebilirsiniz \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f"),Object(o.b)("p",null,"\u0130yi okumalar :) \ud83c\udf89\ud83e\udd1e\ud83c\udffb")))}s.isMDXComponent=!0},q3Ej:function(e,n,a){"use strict";var r=a("q1tI"),i=a.n(r),t=a("Sc5l"),l=a("7ljp"),o=a("rePB"),u=a("wx14"),c=a("qWyU"),s=a("sK1y"),m=a("pVnL"),d=a.n(m),b=a("8OQS"),p=a.n(b),g=a("qKvR"),k=a("lSNA"),y=a.n(k),v=a("8hg0"),O=a("CjxU"),z=a("mf32");function j(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}var f=function(e){var n=e.variant,a=e.colorMode;switch(n){case"solid":return function(e){var n=e.theme.colors,a=e.color,r=n[a]&&n[a][500],i=Object(v.a)(r,.6);return{light:{bg:Object(v.c)(a,500),color:"white"},dark:{bg:i,color:"whiteAlpha.800"}}}(e)[a];case"subtle":return function(e){var n=e.theme.colors,a=e.color,r=n[a]&&n[a][200],i=Object(v.b)(r)[300];return{light:{bg:Object(v.c)(a,100),color:Object(v.c)(a,800)},dark:{bg:i,color:Object(v.c)(a,200)}}}(e)[a];case"outline":return function(e){var n=e.theme.colors,a=e.color,r=n[a]&&n[a][200],i=Object(v.a)(r,.8);return{light:{boxShadow:"inset 0 0 0px 1px "+(n[a]&&n[a][500]),color:Object(v.c)(a,500)},dark:{boxShadow:"inset 0 0 0px 1px "+i,color:i}}}(e)[a];default:return{}}},S=function(e){var n=function(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?j(a,!0).forEach((function(n){y()(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):j(a).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}({},e,{theme:Object(O.b)(),colorMode:Object(z.b)().colorMode});return f(n)},C=a("BMxC"),h=a("D7Da"),B=function(e){var n=e.variantColor,a=void 0===n?"gray":n,r=p()(e,["variantColor"]);Object(h.a)("Code",a);var i=S({variant:"subtle",color:a});return Object(g.d)(C.a,d()({as:"code",display:"inline-block",fontFamily:"mono",fontSize:"sm",px:"0.2em",rounded:"sm"},i,r))},N=Object(r.forwardRef)((function(e,n){var a=e.orientation,r=p()(e,["orientation"]),i="vertical"===a?{borderLeft:"0.0625rem solid",height:"auto",mx:2}:{borderBottom:"0.0625rem solid",width:"auto",my:2};return Object(g.d)(C.a,d()({ref:n,as:"hr","aria-orientation":a,border:"0",opacity:"0.6"},i,{borderColor:"inherit"},r))})),A=a("pboS"),E=a("bQFp"),T=i.a.createElement;function x(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function w(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?x(Object(a),!0).forEach((function(n){Object(o.a)(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):x(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}var P=function(e){var n=e.level,a=e.children;return T(c.a,{mt:6,mb:2,as:"h".concat(n),size:["xl","lg","md","sm","xs","xs"]["".concat(n-1)]},a)},H={em:function(e){var n=e.children;return T(s.a,{as:"em"},n)},blockquote:function(e){var n=e.children;return T(s.a,{as:"i"},n)},code:function(e){var n=e.children,a=e.className;return T(B,{p:2,mt:2,className:a,rounded:"md",maxW:"100%",overflow:"scroll"},n)},del:function(e){var n=e.children;return T(s.a,{as:"del"},n)},thematicBreak:N,a:function(e){var n=e.href,a=e.children;return T(A.a,{href:n,color:"blue.500"},a)},img:function(e){var n=e.src,a=e.alt;return T(E.a,{src:n,alt:a,maxW:"xl",w:"100%",my:2})},p:function(e){return T(s.a,Object(u.a)({as:"p",mt:4,lineHeight:"tall"},e))},ul:function(e){return T(C.a,Object(u.a)({as:"ul",pt:2,pl:4,ml:2},e))},ol:function(e){return T(C.a,Object(u.a)({as:"ol",pt:2,pl:4,ml:2},e))},li:function(e){return T(C.a,Object(u.a)({as:"li"},e))},definition:function(){return null},h1:function(e){return P(w({level:1},e))},h2:function(e){return P(w({level:2},e))},h3:function(e){return P(w({level:3},e))},h4:function(e){return P(w({level:4},e))},h5:function(e){return P(w({level:5},e))},h6:function(e){return P(w({level:6},e))},inlineCode:function(e){var n=e.children;return T(B,{rounded:"md"},n)}},Q=a("+oBk"),M=i.a.createElement;n.a=function(e){var n=e.title,a=e.children;return M(Q.a,{title:n},M(t.a,null,M(l.a,{components:H},a)))}},rePB:function(e,n,a){"use strict";function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}a.d(n,"a",(function(){return r}))}},[["58Os",1,2,4,0,3,5]]]);